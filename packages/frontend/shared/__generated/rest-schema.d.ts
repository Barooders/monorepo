/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/auth/shopify": {
    post: operations["ShopifyController_shopifyLogin"];
  };
  "/v1/customers/wallet": {
    get: operations["CustomerController_fetchCustomerWallet"];
  };
  "/v1/customers": {
    put: operations["CustomerController_updateUserInfo"];
  };
  "/v1/negociation-agreement": {
    post: operations["CustomerController_upsertNegociationAgreement"];
    delete: operations["CustomerController_deleteNegociationAgreement"];
  };
  "/v1/customers/vendor-data": {
    get: operations["CustomerController_fetchVendorDataUrl"];
  };
  "/v1/customers/webhook/signup": {
    post: operations["CustomerWebhooksHasuraController_handleSignupHasuraEvent"];
  };
  "/v1/orders/webhook/paid-event": {
    post: operations["PaidOrderWebhookShopifyController_"];
  };
  "/v1/admin/orders/webhook/paid-event": {
    post: operations["PaidOrderWebhookShopifyController_handlePaidOrderEventAsAdmin"];
  };
  "/v1/orders/webhook/created-event": {
    post: operations["CreatedOrderWebhookShopifyController_handleCreatedOrderEvent"];
  };
  "/v1/orders/webhook/update": {
    post: operations["OrderWebhookSendCloudController_notifyOnParcelUpdate"];
  };
  "/v1/orders/hand-delivery": {
    get: operations["HandDeliveryOrderController_getPaidHandDeliveryOrders"];
  };
  "/v1/orders/hand-delivery/status": {
    post: operations["HandDeliveryOrderController_setDeliveredOrderMatchingProductId"];
  };
  "/v1/orders/{orderId}": {
    get: operations["OrderController_getOrder"];
  };
  "/v1/orders/{orderId}/shipping-label": {
    post: operations["OrderController_getOrCreateShippingLabel"];
  };
  "/v1/admin/order-lines/{orderLineId}/fulfill": {
    post: operations["OrderController_fulFillOrderLineAsAdmin"];
  };
  "/v1/order-lines/{orderLineId}/fulfill": {
    post: operations["OrderController_fulFillOrderLine"];
  };
  "/v1/admin/order/{orderId}/refund": {
    post: operations["OrderController_refundOrderAsAdmin"];
  };
  "/v1/admin/order/{orderId}/cancel": {
    post: operations["OrderController_cancelOrderAsAdmin"];
  };
  "/v1/order-lines/{orderLineId}/cancel": {
    post: operations["OrderController_cancelOrder"];
  };
  "/v1/admin/order-lines/{orderLineId}/update-status": {
    post: operations["OrderController_updateOrderStatusAsAdmin"];
  };
  "/v1/invoice/preview-payout": {
    get: operations["PayoutController_previewPayout"];
  };
  "/v1/invoice/payout": {
    post: operations["PayoutController_executePayout"];
  };
  "/v1/products/create": {
    post: operations["ProductController_createDraftProduct"];
  };
  "/v1/admin/products/create": {
    post: operations["ProductController_createProduct"];
  };
  "/v1/products/{productId}/image": {
    post: operations["ProductController_addProductImage"];
  };
  "/v1/products/{productId}/image/{imageId}": {
    delete: operations["ProductController_deleteProductImage"];
  };
  "/v1/products/by-handle/{productHandle}": {
    get: operations["ProductController_getProductByHandle"];
  };
  "/v1/admin/products/{productId}": {
    get: operations["ProductController_getProductByAdmin"];
    patch: operations["ProductController_updateProductByAdmin"];
  };
  "/v1/products/{productId}": {
    patch: operations["ProductController_updateProduct"];
  };
  "/v1/products/{productId}/variants/{productVariantId}": {
    patch: operations["ProductController_updateProductVariant"];
  };
  "/v1/admin/vendors/{vendorId}/products": {
    post: operations["ProductController_triggerVendorProductsUpdateByAdmin"];
  };
  "/v1/admin/products/{productId}/variants/{productVariantId}": {
    patch: operations["ProductController_updateProductVariantByAdmin"];
  };
  "/v1/admin/products/{productId}/moderate": {
    post: operations["ProductController_moderateProduct"];
  };
  "/v1/commission/create": {
    post: operations["BuyerCommissionController_createAndPublishCommissionProduct"];
  };
  "/v1/commission/compute-line-item": {
    get: operations["BuyerCommissionController_computeLineItemCommission"];
  };
  "/v1/commission/product": {
    get: operations["BuyerCommissionController_computeProductCommission"];
  };
  "/v1/price-offer": {
    post: operations["PriceOfferController_createPublicPriceOffer"];
  };
  "/v1/price-offer/b2b": {
    post: operations["PriceOfferController_createB2BPriceOfferByBuyer"];
  };
  "/v1/price-offer/{priceOfferId}": {
    put: operations["PriceOfferController_updatePriceOffer"];
  };
  "/v1/chat/conversation": {
    post: operations["ChatController_getOrCreateConversation"];
  };
  "/v1/chat/message/webhook": {
    post: operations["ChatController_handleNewMessageWebhook"];
  };
  "/v1/buy/payment/checkout": {
    post: operations["PaymentWebController_getOrCreateCheckout"];
  };
  "/v1/buy/payment/eligibility": {
    post: operations["PaymentWebController_checkPaymentEligibility"];
  };
  "/v1/buy/payment/link": {
    post: operations["PaymentWebController_createPaymentLink"];
  };
  "/v1/buy/payment/link/redirect": {
    get: operations["PaymentWebController_redirectToPaymentLink"];
  };
  "/v1/buy/payment/notify": {
    post: operations["PaymentFloaWebhookController_notifyPaymentResult"];
  };
  "/v1/delivery-profile/product-variant/{shopifyProductVariantId}": {
    get: operations["DeliveryProfileController_getProductDeliveryProfile"];
  };
  "/v1/__internal__/heartbeat": {
    get: operations["HealthCheckController_beat"];
  };
  "/v1/shopify/auth": {
    get: operations["ShopifyAuthController_handleAuthentication"];
  };
  "/v1/shopify/auth/callback": {
    get: operations["ShopifyAuthController_handleAuthenticationCallback"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ShopifyLoginResponse: {
      multipassToken: string;
      loginUrl: string;
    };
    UpdateUserInputDto: {
      phoneNumber: string;
    };
    NegociationAgreementInputDto: {
      maxAmountPercent: number;
    };
    NegociationAgreementResponseDto: {
      id: string;
    };
    VendorDataUrlDto: {
      url: string;
    };
    ValidateHandDeliveryOrderDto: Record<string, never>;
    OrderLineFulfillmentDTO: Record<string, never>;
    OrderStatusUpdateDTO: {
      /** @example 2023-01-14 16:54:08 */
      updatedAt: string;
      /** @enum {string} */
      status: "CREATED" | "PAID" | "SHIPPED" | "DELIVERED" | "PAID_OUT" | "CANCELED" | "RETURNED" | "LABELED";
    };
    PayoutInputQuery: {
      /** @description The Shopify id of the order line */
      orderLineShopifyId: string;
      /** @description A comment to store a reason for a price change for example */
      comment?: string;
      /** @description An amount to replace the calculated one */
      amountInCents?: number;
    };
    BundlePriceDTO: Record<string, never>;
    DraftProductInputDto: {
      bundlePrices: components["schemas"]["BundlePriceDTO"][];
    };
    AddProductImageDTO: {
      attachment: string;
      position?: number;
      filename?: string;
    };
    AddProductImageResponseDTO: {
      src: string;
      id: string;
    };
    VariantDTO: {
      id: number;
      option1: string;
      option2: string;
      option3: string;
      inventory_management: string;
      inventory_policy: string;
      title: string;
      price: string;
      compare_at_price: string;
      sku: string;
      inventory_quantity: number;
      condition: string;
    };
    OptionDTO: {
      name: string;
      values: unknown[][];
    };
    MainProductImageDTO: {
      src: string;
      attachment: string;
      id: number;
      created_at: string;
      position: number;
      updated_at: string;
      product_id: number;
      variant_ids: unknown[][];
      width: number;
      height: number;
      alt: string;
    };
    SimpleImageDTO: {
      src: string;
      attachment: string;
      id: number;
    };
    ProductAdminDTO: {
      id: number;
      status: string;
      vendor: string;
      tags: string[];
      variants: components["schemas"]["VariantDTO"][];
      options: components["schemas"]["OptionDTO"][];
      created_at: string;
      updated_at: string;
      template_suffix: string;
      handle: string;
      published_at: string;
      published_scope: string;
      image: components["schemas"]["MainProductImageDTO"];
      title: string;
      body_html: string;
      product_type: string;
      images: components["schemas"]["SimpleImageDTO"][];
      price: number;
      compare_at_price: number;
      EANCode: string;
      GTINCode: string;
      source: string;
    };
    ProductUpdateInputDto: {
      /** @enum {string} */
      status?: "ARCHIVED" | "DRAFT" | "ACTIVE";
      bodyHtml?: string;
      title?: string;
      tags?: string[];
      product_type?: string;
      handDeliveryPostalCode?: string;
      metafields?: unknown[];
    };
    AmountDTO: {
      /**
       * @description Value of the amount in the chosen currency
       * @example 124999
       */
      amountInCents: number;
      /**
       * @description The chosen currency
       * @default EUR
       */
      currency?: string;
    };
    ProductVariantUpdateInputDto: {
      quantity?: number;
      price?: components["schemas"]["AmountDTO"];
      compareAtPrice?: components["schemas"]["AmountDTO"];
      condition?: string;
    };
    UUID: Record<string, never>;
    ProductAdminUpdateInputDto: {
      /** @enum {string} */
      status?: "ARCHIVED" | "DRAFT" | "ACTIVE";
      bodyHtml?: string;
      title?: string;
      tags?: string[];
      product_type?: string;
      handDeliveryPostalCode?: string;
      metafields?: unknown[];
      /** @enum {string} */
      manualNotation?: "A" | "B" | "C";
      vendorId?: components["schemas"]["UUID"];
    };
    ModerateProductInputDto: Record<string, never>;
    CommissionInputDto: {
      cartLineIds?: string[];
    };
    Commission: {
      productStoreId: string;
      variantStoreId: string;
      amountInCents: number;
    };
    NewPublicPriceOfferDTO: {
      buyerId: string;
      newPriceInCents: number;
      productId: string;
      productVariantId?: string;
      description?: string;
    };
    PriceOfferDTO: {
      buyerId: string;
      newPriceInCents: number;
      productId: string;
      productVariantId?: string;
      description?: string;
      id: string;
      createdAt: string;
      initiatedBy: string;
      status: string;
      discountCode: string;
    };
    NewB2BPriceOfferDTO: {
      newPriceInCents: number;
      productId: string;
      description: string;
    };
    UpdatePriceOfferDTO: {
      status: string;
    };
    ConversationInputDto: Record<string, never>;
    ProductDTO: {
      amount: components["schemas"]["AmountDTO"];
      shipping: string;
      productType: string;
      id: string;
    };
    CartInfoDTO: {
      storeId: string;
      totalAmount: components["schemas"]["AmountDTO"];
      productsCount: number;
      products: components["schemas"]["ProductDTO"][];
    };
    AddressDTO: {
      /**
       * @description Address line
       * @example 1 rue Paul Dijon
       */
      line1: string;
      /**
       * @description Department zipcode
       * @example 38000
       */
      zipCode: string;
      /**
       * @description The city name
       * @example Grenoble
       */
      city: string;
      /**
       * @description The country code
       * @example FR
       */
      countryCode: string;
    };
    CustomerInfoDTO: {
      /** @example Mike */
      firstName: string;
      /** @example Horn */
      lastName: string;
      /** @example tech@barooders.com */
      email: string;
      /**
       * @description Iso formatted birthdate
       * @example 2024-04-03T16:08:40.134Z
       */
      birthDate: string;
      /**
       * @description Department zipcode
       * @example 38000
       */
      birthZipCode: string;
      /**
       * @description Civility (Mr or Ms)
       * @example Mr
       */
      civility: string;
      address: components["schemas"]["AddressDTO"];
      /**
       * @description Phone number with country code
       * @example +33612345678
       */
      phoneNumber: string;
    };
    EligibilityInputDTO: {
      customerInfo: components["schemas"]["CustomerInfoDTO"];
      cartInfo: components["schemas"]["CartInfoDTO"];
      checkoutId: string;
      paymentSolutionCode: string;
    };
    PaymentLinkDTO: {
      /** @description The id of the payment generated at eligibility */
      paymentId: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  ShopifyController_shopifyLogin: {
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["ShopifyLoginResponse"];
        };
      };
    };
  };
  CustomerController_fetchCustomerWallet: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  CustomerController_updateUserInfo: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserInputDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  CustomerController_upsertNegociationAgreement: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NegociationAgreementInputDto"];
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["NegociationAgreementResponseDto"];
        };
      };
    };
  };
  CustomerController_deleteNegociationAgreement: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  CustomerController_fetchVendorDataUrl: {
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["VendorDataUrlDto"];
        };
      };
    };
  };
  CustomerWebhooksHasuraController_handleSignupHasuraEvent: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  PaidOrderWebhookShopifyController_: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  PaidOrderWebhookShopifyController_handlePaidOrderEventAsAdmin: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  CreatedOrderWebhookShopifyController_handleCreatedOrderEvent: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderWebhookSendCloudController_notifyOnParcelUpdate: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  HandDeliveryOrderController_getPaidHandDeliveryOrders: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  HandDeliveryOrderController_setDeliveredOrderMatchingProductId: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidateHandDeliveryOrderDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderController_getOrder: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  OrderController_getOrCreateShippingLabel: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  OrderController_fulFillOrderLineAsAdmin: {
    parameters: {
      path: {
        orderLineId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderLineFulfillmentDTO"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderController_fulFillOrderLine: {
    parameters: {
      path: {
        orderLineId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderLineFulfillmentDTO"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderController_refundOrderAsAdmin: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderController_cancelOrderAsAdmin: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderController_cancelOrder: {
    parameters: {
      path: {
        orderLineId: string;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  OrderController_updateOrderStatusAsAdmin: {
    parameters: {
      path: {
        orderLineId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderStatusUpdateDTO"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  PayoutController_previewPayout: {
    parameters: {
      query: {
        /** @description The id of the Shopify order line */
        orderLineShopifyId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PayoutController_executePayout: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayoutInputQuery"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ProductController_createDraftProduct: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftProductInputDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ProductController_createProduct: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftProductInputDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ProductController_addProductImage: {
    parameters: {
      path: {
        productId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddProductImageDTO"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AddProductImageResponseDTO"];
        };
      };
    };
  };
  ProductController_deleteProductImage: {
    parameters: {
      path: {
        productId: string;
        imageId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProductController_getProductByHandle: {
    parameters: {
      path: {
        productHandle: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProductController_getProductByAdmin: {
    parameters: {
      path: {
        productId: string;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["ProductAdminDTO"];
        };
      };
    };
  };
  ProductController_updateProductByAdmin: {
    parameters: {
      path: {
        productId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductAdminUpdateInputDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProductController_updateProduct: {
    parameters: {
      path: {
        productId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductUpdateInputDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProductController_updateProductVariant: {
    parameters: {
      path: {
        productId: string;
        productVariantId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductVariantUpdateInputDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProductController_triggerVendorProductsUpdateByAdmin: {
    parameters: {
      path: {
        vendorId: string;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ProductController_updateProductVariantByAdmin: {
    parameters: {
      path: {
        productId: string;
        productVariantId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductVariantUpdateInputDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProductController_moderateProduct: {
    parameters: {
      path: {
        productId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModerateProductInputDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  BuyerCommissionController_createAndPublishCommissionProduct: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommissionInputDto"];
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Commission"];
        };
      };
    };
  };
  BuyerCommissionController_computeLineItemCommission: {
    parameters: {
      query: {
        /**
         * @description The price amount (Decimal)
         * @example 29.99
         */
        amount: number;
        /** @description The product vendor. */
        vendor: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  BuyerCommissionController_computeProductCommission: {
    parameters: {
      query: {
        /**
         * @description The handle of a product
         * @example vtt-enduro
         */
        productHandle: string;
        /**
         * @description The id of a product
         * @example 73829019283
         */
        productId: string;
        /** @description The shopify id of a variant. */
        variantId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PriceOfferController_createPublicPriceOffer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPublicPriceOfferDTO"];
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PriceOfferDTO"];
        };
      };
    };
  };
  PriceOfferController_createB2BPriceOfferByBuyer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewB2BPriceOfferDTO"];
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PriceOfferDTO"];
        };
      };
    };
  };
  PriceOfferController_updatePriceOffer: {
    parameters: {
      path: {
        priceOfferId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePriceOfferDTO"];
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PriceOfferDTO"];
        };
      };
    };
  };
  ChatController_getOrCreateConversation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConversationInputDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ChatController_handleNewMessageWebhook: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  PaymentWebController_getOrCreateCheckout: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartInfoDTO"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  PaymentWebController_checkPaymentEligibility: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EligibilityInputDTO"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  PaymentWebController_createPaymentLink: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentLinkDTO"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  PaymentWebController_redirectToPaymentLink: {
    parameters: {
      query: {
        /** @description The id of the payment generated at eligibility */
        paymentId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PaymentFloaWebhookController_notifyPaymentResult: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  DeliveryProfileController_getProductDeliveryProfile: {
    parameters: {
      path: {
        shopifyProductVariantId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  HealthCheckController_beat: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  ShopifyAuthController_handleAuthentication: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  ShopifyAuthController_handleAuthenticationCallback: {
    responses: {
      200: {
        content: never;
      };
    };
  };
}
